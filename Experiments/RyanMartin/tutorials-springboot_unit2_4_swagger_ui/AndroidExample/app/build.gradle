plugins {
    id 'com.android.application'
}

android {
    namespace 'com.example.androidexample'
    compileSdk 33

    defaultConfig {
        applicationId "com.example.androidexample"
        minSdk 24
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

// currently only work with AGP v7
task javadoc(type: Javadoc) {

    doFirst {
        configurations.implementation
                .filter { it.name.endsWith('.aar') }
                .each { aar ->
                    copy {
                        from zipTree(aar)
                        include "**/classes.jar"
                        into "$buildDir/tmp/aarsToJars/${aar.name.replace('.aar', '')}/"
                    }
                }
    }

    configurations.implementation.setCanBeResolved(true)
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.implementation
    classpath += fileTree(dir: "$buildDir/tmp/aarsToJars/")

    android.applicationVariants.all { variant ->
        if (variant.name == 'release') {
            owner.classpath += variant.javaCompileProvider.get().classpath
        }
    }

    destinationDir = file("${project.buildDir}/outputs/javadoc/")
    options.memberLevel = JavadocMemberLevel.PRIVATE
    failOnError false
    exclude '**/BuildConfig.java'
    exclude '**/R.java'
}


// use this if project has data-binding issues
// replace paths per your project structure

//task myassemble(type: GradleBuild) {
//    tasks = ['assemble']
//}
//
//task javadoc(type: Javadoc, dependsOn: 'myassemble') {
//    doFirst {
//        configurations.implementation
//                .filter { it.name.endsWith('.aar') }
//                .each { aar ->
//                    copy {
//                        from zipTree(aar)
//                        include "**/classes.jar"
//                        into "$buildDir/tmp/aarsToJars/${aar.name.replace('.aar', '')}/"
//                    }
//                }
//        copy {
//            from "$buildDir/generated/data_binding_base_class_source_out/debug/out/com/reciperescue" // change path
//            into 'src/main/java/com/reciperescue'     // change path
//        }
//    }
//
//    configurations.implementation.setCanBeResolved(true)
//    classpath = files(new File("${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"))
//    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//    classpath += configurations.implementation
//    classpath += fileTree(dir: "$buildDir/tmp/aarsToJars/")
//
//    android.applicationVariants.all { variant ->
//        if (variant.name == 'release') {
//            owner.classpath += variant.javaCompileProvider.get().classpath
//        }
//    }
//
//    source = android.sourceSets.main.java.srcDirs
//    destinationDir = file("${project.buildDir}/outputs/javadoc/")
//    options.memberLevel = JavadocMemberLevel.PRIVATE
//    failOnError false
//    exclude '**/R.java'
//
//    doLast{
//        delete 'src/main/java/com/reciperescue/databinding'       // change path
//    }
//}



dependencies {
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.9.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    implementation 'com.android.volley:volley:1.2.1'
}